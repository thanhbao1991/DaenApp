@page
@model TraSuaAppWeb.Pages.HoaDon.CreatePlusModel
@{
    ViewData["Title"] = "Thêm hoá đơn (Plus)";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />

<style>
    /* === Borderless groups for CreatePlus (scoped) === */
#InvoicePlus .card { border: 0; box-shadow: none; }
#InvoicePlus .card-header { border-bottom: 0; }
#InvoicePlus .list-group-item { border: 0; }

/* Làm mềm các “ô viền” nhỏ bên trong (loyalty/tổng nợ) thay vì khung đậm */
#InvoicePlus .card .border { border-color: rgba(0,0,0,.08) !important; }

/* Giữ bảng tổng tiền rõ ràng nhưng nhẹ mắt hơn */
#InvoicePlus .table.table-bordered,
#InvoicePlus .table.table-bordered > :not(caption) > * > * {
  border-color: rgba(0,0,0,.12);
}

/* Cửa sổ gợi ý (portal) đã mảnh; thêm chút radius cho dịu hơn */
#InvoicePlus .portal-list { border-color: rgba(0,0,0,.08); border-radius: 10px; }

/* Khoảng cách giữa các nhóm nhìn thoáng hơn */
#InvoicePlus .card { margin-bottom: .6rem; }

    .busy-mask {
        position: fixed;
        inset: 0;
        background: rgba(255,255,255,.6);
        display: none;
        z-index: 4000
    }

        .busy-mask .spinner-wrap {
            position: absolute;
            top: 45%;
            left: 50%;
            transform: translate(-50%,-50%)
        }

    .blink {
        animation: blink .4s linear infinite alternate; /* trước là: 1 */
    }

    .add-toast {
        position: fixed;
        z-index: 6000;
        padding: .45rem .75rem;
        border-radius: 999px;
        background: #198754;
        color: #fff;
        box-shadow: 0 8px 22px rgba(0,0,0,.25);
        display: none;
        font-weight: 600;
        white-space: nowrap;
        transform: translate(-50%,-50%);
    }

        .add-toast.show {
            display: block;
            animation: toastpop .18s ease-out;
        }
    @@keyframes toastpop {
        from

    {
        opacity: .6;
        transform: translate(-50%,-40%)
    }

    to {
        opacity: 1;
        transform: translate(-50%,-50%)
    }

    }

    .pulse {
        animation: pulse .55s ease-out;
    }
    @@keyframes pulse {
        0%

    {
        transform: scale(1)
    }

    50% {
        transform: scale(1.14)
    }

    100% {
        transform: scale(1)
    }

    }

    @@keyframes blink {
        50% {
            opacity: .2
        }
    }

    /* iOS-safe portal dropdown */
    .portal-list {
        position: fixed;
        left: 0;
        top: 0;
        width: 280px;
        max-height: 40vh;
        overflow: auto;
        -webkit-overflow-scrolling: touch;
        z-index: 5000;
        display: none;
        background: #fff;
        border: 1px solid rgba(0,0,0,.12);
        border-radius: 8px;
        box-shadow: 0 8px 24px rgba(0,0,0,.18)
    }

        .portal-list.show {
            display: block
        }

    .portal-item {
        padding: .5rem .75rem;
        border-bottom: 1px solid rgba(0,0,0,.06);
        cursor: pointer;
    }

        .portal-item:last-child {
            border-bottom: 0
        }

        .portal-item small {
            color: #6c757d
        }

        .portal-item .pick-price {
            min-width: 72px;
            text-align: right;
        }

    .text-clip-1 {
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        overflow: hidden;
        white-space: normal;
    }

    #FormError:not(:empty) {
        font-weight: 600;
    }

    /* Modal notes + topping */
    .note-chip {
        border: 1px solid rgba(0,0,0,.15);
        border-radius: 999px;
        padding: .25rem .6rem;
        cursor: pointer;
        user-select: none;
    }

        .note-chip.active {
            background: #0d6efd;
            color: #fff;
            border-color: #0d6efd;
        }

    .topping-row {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: .5rem;
        padding: .35rem 0;
        border-bottom: 1px dashed rgba(0,0,0,.06);
    }

        .topping-row:last-child {
            border-bottom: 0;
        }

    .topping-qty button {
        width: 28px;
    }
</style>

<div class="busy-mask" id="BusyMask">
    <div class="spinner-wrap text-center">
        <div class="spinner-border" role="status"></div>
        <div class="mt-2">Đang xử lý...</div>
    </div>
</div>

<div id="InvoicePlus" class="container-fluid p-2 p-md-3">

    <div class="d-flex align-items-center justify-content-between mb-2">
        <h5 class="mb-0"><i class="fa fa-file-invoice"></i> Thêm hoá đơn (Plus)</h5>
        <button class="btn btn-outline-secondary btn-sm" onclick="location.reload()"><i class="fa fa-rotate"></i></button>
    </div>

    <!-- Loại đơn + Bàn -->
    <div class="card mb-2">
        <div class="card-body d-flex flex-wrap gap-2 align-items-end">
            <div class="btn-group me-2" role="group">
                <input type="radio" class="btn-check" name="LoaiDon" id="ld_taicho">
                <label class="btn btn-outline-success" for="ld_taicho"><i class="fa fa-utensils"></i> Tại chỗ</label>

                <input type="radio" class="btn-check" name="LoaiDon" id="ld_muave">
                <label class="btn btn-outline-primary" for="ld_muave"><i class="fa fa-bag-shopping"></i> Mua về</label>

                <input type="radio" class="btn-check" name="LoaiDon" id="ld_ship" checked>
                <label class="btn btn-outline-warning" for="ld_ship"><i class="fa fa-truck"></i> Ship</label>

                <input type="radio" class="btn-check" name="LoaiDon" id="ld_app">
                <label class="btn btn-outline-danger" for="ld_app"><i class="fa fa-mobile-screen"></i> App</label>
            </div>

            <div id="banWrap">
                <label class="form-label mb-0 small">Bàn</label>
                <select id="TenBan" class="form-select form-select-sm">
                    <option value="">--</option>
                    <option>2</option>
                    <option>3</option>
                    <option>4</option>
                    <option>5</option>
                    <option>6</option>
                    <option>7</option>
                    <option>8</option>
                    <option>9</option>
                    <option>10</option>
                    <option>13</option>
                    <option>Sân 1</option>
                    <option>Sân 2</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Khách hàng -->
    <div class="card mb-2">
        <div class="card-body">
            <div class="row g-2">
                <div class="col-12">
                    <label class="form-label mb-1">Khách hàng</label>
                    <div class="position-relative">
                        <div class="input-group">
                            <span class="input-group-text"><i class="fa fa-magnifying-glass"></i></span>
                            <input id="KhachHangText" class="form-control" placeholder="Tìm tên / SĐT..." autocomplete="off" style="padding-right:2.2rem;" />
                        </div>
                        <button id="KhachHangClear" type="button"
                                class="btn btn-sm btn-light position-absolute top-50 end-0 translate-middle-y me-1 d-none"
                                title="Xoá nhanh" onclick="clearKhInput()">
                            <i class="fa-solid fa-xmark"></i>
                        </button>
                    </div>
                </div>
                <div class="col-6">
                    <label class="form-label mb-1">Điện thoại</label>
                    <div class="input-group">
                        <input id="DienThoai" class="form-control" />
                        <button id="PickPhoneBtn" class="btn btn-outline-secondary" type="button" title="Chọn SĐT" tabindex="-1"><i class="fa fa-caret-down"></i></button>
                    </div>
                </div>
                <div class="col-6">
                    <label class="form-label mb-1">Địa chỉ</label>
                    <div class="input-group">
                        <input id="DiaChi" class="form-control" />
                        <button id="PickAddrBtn" class="btn btn-outline-secondary" type="button" title="Chọn địa chỉ" tabindex="-1"><i class="fa fa-caret-down"></i></button>
                    </div>
                </div>
            </div>
            <div id="LoyaltyPanel" class="row g-2 mt-2 d-none">
                <!-- Ô gộp: bên trái tháng này, bên phải tháng trước -->
                <div class="col-12 col-md-8">
                    <div class="border rounded p-2 d-flex justify-content-between align-items-center">
                        <div class="me-3">
                            <div class="small text-muted">Điểm tháng này</div>
                            <div class="fw-bold"><span id="DiemThangNay">0</span></div>
                        </div>
                        <div class="text-end">
                            <div class="small text-muted">Điểm tháng trước</div>
                            <div class="fw-bold">
                                <span id="DiemThangTruoc">0</span>
                                <span id="VoucherBlink" class="badge bg-warning text-dark d-none">Có voucher!</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Tổng nợ giữ riêng -->
                <div class="col-12 col-md-4">
                    <div class="border rounded p-2">
                        <div class="small text-muted">Tổng nợ</div>
                        <div id="TongNo" class="fw-bold text-danger">0</div>
                    </div>
                </div>
            </div>
            <!-- Gợi ý theo khách: chỉ nút, không hiển thị số lượng -->
            <div id="FavoriteWrap" class="small mt-2 text-muted d-none">
                <span id="FavoriteMon" class="fw-semibold"></span>
            </div>
        </div>
    </div>

    <!-- Tìm sản phẩm -->
    <div class="card mb-2">
        <div class="card-body">
            <label class="form-label mb-1">Thêm món</label>
            <div class="input-group">
                <span class="input-group-text"><i class="fa fa-magnifying-glass"></i></span>
                <input id="SearchSanPham" class="form-control" placeholder="Nhập tên món..." autocomplete="off" autocapitalize="off" spellcheck="false" />
            </div>
        </div>
    </div>

    <!-- Danh sách món -->
    <div class="card mb-2">
        <div class="card-header py-2 d-flex justify-content-between align-items-center">
            <strong><i class="fa fa-list"></i> Món đã chọn</strong>
            <span id="TongSo" class="badge bg-success">0 món</span>
        </div>
        <div class="card-body p-0">
            <div id="Lines" class="list-group list-group-flush"></div>
        </div>
    </div>

    <!-- Tổng tiền -->
    <div class="card mb-3">
        <div class="card-body">
            <div class="row g-2">

                <!-- Điểm & áp dụng voucher (nằm trên combobox) -->
                <div class="mb-2">
                    <div class="mt-2">
                        <!-- Chỉ hiện khi đủ điều kiện -->
                        <button id="ApplyVoucherBtn" type="button" class="btn btn-sm btn-outline-success d-none">
                            Áp dụng voucher theo điểm
                        </button>
                    </div>
                </div>

                <div class="col-12 col-md-6">
                    <label class="form-label mb-1">Voucher</label>
                    <select id="VoucherId" class="form-select"><option value="">-- Không áp dụng --</option></select>
                </div>
                <div class="col-6 col-md-3">
                    <label class="form-label mb-1">Giảm giá cố định (đ)</label>
                    <input id="GiamGiaFix" inputmode="numeric" class="form-control" value="0" />
                </div>
                <div class="col-6 col-md-3">
                    <label class="form-label mb-1">Công nợ (đ)</label>
                    <div id="CongNoView" class="form-control-plaintext text-end">0</div>
                </div>
            </div>

            <div class="mt-3 table-responsive">
                <table class="table table-sm table-bordered align-middle mb-0">
                    <tbody>
                        <tr><th style="width:35%">Tạm tính</th><td class="text-end"><span id="TongTien">0</span> đ</td></tr>
                        <tr><th>Giảm giá</th><td class="text-end"><span id="GiamGia">0</span> đ</td></tr>
                        <tr class="table-secondary"><th class="fw-bold">Thành tiền</th><td class="text-end fw-bold"><span id="ThanhTien">0</span> đ</td></tr>
                        <tr><th>Công nợ hiện tại</th><td class="text-end"><span id="CongNoDisplay">0</span> đ</td></tr>
                        <tr class="table-warning"><th class="fw-bold">Tổng phải thu</th><td class="text-end fw-bold"><span id="TongPhaiThu">0</span> đ</td></tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Save -->
    <div class="d-grid gap-2 mb-5">
        <button id="SaveBtn" class="btn btn-primary btn-lg" onclick="saveInvoice()">
            <i class="fa fa-floppy-disk"></i> Lưu hoá đơn
        </button>
        <div class="text-center small">
            <div id="CountdownText" class="text-muted">Tự lưu sau: 05:00</div>
            <div id="FormError" class="text-danger mt-1"></div>
            <div id="SaveHint" class="text-success mt-1"></div>
        </div>
    </div>

    <div id="AddToast" class="add-toast">
        <i class="fa fa-check me-1"></i><span id="AddToastText"></span>
    </div>
</div>

<!-- Modal tuỳ chỉnh dòng -->
<div class="modal fade" id="lineModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header py-2">
                <h6 class="modal-title"><i class="fa fa-sliders"></i> Tuỳ chỉnh món</h6>
                <button class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-2">
                    <label class="form-label mb-1">Biến thể</label>
                    <select id="ModalBienThe" class="form-select"></select>
                </div>

                <div class="mb-2">
                    <label class="form-label mb-1">Ghi chú thường dùng</label>
                    <div id="ModalNotes" class="d-flex flex-wrap gap-1"></div>
                </div>

                <div class="mb-2">
                    <label class="form-label mb-1">Ghi chú tự do</label>
                    <textarea id="ModalNote" class="form-control" rows="2" placeholder="Ví dụ: ít đá, ít ngọt..."></textarea>
                </div>

                <div>
                    <div class="d-flex justify-content-between align-items-center">
                        <label class="form-label mb-1">Topping</label>
                        <small class="text-muted">Cộng vào dòng</small>
                    </div>
                    <div id="ModalToppings"></div>
                </div>
            </div>
            <div class="modal-footer py-2">
                <div class="me-auto small text-muted">
                    <span>Tổng topping: </span><strong id="ModalTopTotal">0</strong> đ
                </div>
                <button class="btn btn-outline-secondary" data-bs-dismiss="modal">Đóng</button>
                <button class="btn btn-primary" onclick="applyModal()">Áp dụng</button>
            </div>
        </div>
    </div>
</div>

<!-- SEED -->
<script>
    window.__KH_INIT = @Html.Raw(Model.KHJson);
    window.__SP_INIT = @Html.Raw(Model.SPJson);
    window.__GB_INIT = @Html.Raw(Model.GBJson);
    window.__VOUCHER_INIT = @Html.Raw(Model.VouchersJson);
</script>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
    <script>
        /* ========================== HELPERS ========================== */
        const fmt = n => (n||0).toLocaleString('vi-VN');
        const parseMoney = s => { const x=(s||'').toString().replace(/[^\d]/g,''); return x?parseInt(x):0; }
        const el = id => document.getElementById(id);
        const showBusy = on => el('BusyMask').style.display = on? 'block':'none';
        const noAccent = (s='') => s.normalize('NFD').replace(/[\u0300-\u036f]/g,'').replace(/đ/g,'d').replace(/Đ/g,'D').toLowerCase();
        const debounce=(fn,ms=220)=>{let t;return(...a)=>{clearTimeout(t);t=setTimeout(()=>fn(...a),ms)}};
        const normalize=(s='')=>noAccent((s||'').trim()).replace(/\s+/g,' ');
        const tokenize =(s='')=>normalize(s).split(' ').filter(Boolean);
        const makeSearchKeys=raw=>{const nx=normalize(raw);const tokens=nx.split(' ').filter(Boolean);return{tokens,initials:tokens.map(t=>t[0]).join(''),compact:nx.replace(/\s+/g,'')}};
        function scoreByTokens(tokens, hay, minHit=100){ if(!tokens.length||!hay?.length) return 0; let score=0; for(const q of tokens){let hit=0; for(const t of hay){ if(t===q){hit=500;break;} else if(t.startsWith(q)) hit=Math.max(hit,300); else if(t.includes(q)) hit=Math.max(hit,100);} if(hit<minHit) return 0; score+=hit;} return score;}
        const round1000=(x,mode='nearest')=>{ if(!x) return 0; if(mode==='down') return Math.floor(x/1000)*1000; if(mode==='up') return Math.ceil(x/1000)*1000; return Math.round(x/1000)*1000; };

        /* ========================== LOYALTY (giống WPF) ========================== */
        const DIEM_MOI_SAO = 3000;                // LoyaltyHelper.DiemMoiSao
        const GIA_TRI_VOUCHER_MOI_SAO = 10000;    // LoyaltyHelper.GiaTriVoucherMoiSao

        function tinhSoSaoDay(diem){
          if (diem < 0) return 0;
          return Math.floor(diem / DIEM_MOI_SAO);
        }
        function tinhGiaTriVoucher(diem){
          return tinhSoSaoDay(diem) * GIA_TRI_VOUCHER_MOI_SAO;
        }
        // StarHelper.GetStarText phiên bản JS
        function starText(diem){
          if (diem < 0) return '';
          const stars = diem / DIEM_MOI_SAO;
          const full = Math.floor(stars);
          const half = (stars - full) >= 0.5;
          let icons = '';
          if (diem < DIEM_MOI_SAO) {
            icons = '☆';
          } else {
            icons = '★'.repeat(full);
            if (half) icons += '☆';
          }
          const display = Math.floor(diem / 100); // giữ nguyên /100 như WPF đang hiển thị
          return `${display} (${icons})`;
        }

        /* ========================== STATE ========================== */
        let khId=null, khProfile={addresses:[], phones:[]};
        const lines=[]; // {idSanPham,idBienThe,tenSanPham,tenBienThe,soLuong,donGia,note,toppings:[],topTotal:0}
        let modalIdx=-1;
        let secondsLeft=300, autosaveTimer=null, unsaved=true;
        let KH_CACHE=null, SP_CACHE=null, GB_CACHE=null, VOUCHER_CACHE=null;
        let GB_INDEX=null;
        let congNoCurrent=0;
        // Loyalty state từ server
        let loyaltyState = { duocNhan:false, daNhan:false, diemNay:0, diemTruoc:0 };

        const COMMON_NOTES=["Ít đá","Không đá","Ít ngọt","Không đường","Thêm đường","Ít trân châu","Nhiều kem cheese"];

        /* ========================== AUTOSAVE ========================== */
        function startAutosave(){ clearInterval(autosaveTimer); secondsLeft=300;
          autosaveTimer=setInterval(()=>{ secondsLeft--; el('CountdownText').innerText=`Tự lưu sau: ${String(Math.floor(secondsLeft/60)).padStart(2,'0')}:${String(secondsLeft%60).padStart(2,'0')}`; if(secondsLeft<=0){ clearInterval(autosaveTimer); if(unsaved) saveInvoice(true);} },1000);
        }
        function touchChanged(){ unsaved=true; startAutosave(); }
        window.addEventListener('beforeunload',e=>{ if(unsaved && lines.length>0){ e.preventDefault(); e.returnValue=''; } });

        /* ========================== CACHE ========================== */
        const TTL_MIN=10, nowSec=()=>Math.floor(Date.now()/1000);
        function cacheGet(k){ try{const j=JSON.parse(localStorage.getItem(k)||'{}'); if(!j.data||!j.exp||j.exp<nowSec())return null; return j.data;}catch{return null;} }
        function cacheSet(k,d){ localStorage.setItem(k, JSON.stringify({data:d,exp:nowSec()+TTL_MIN*60})); }

        /* ========================== PRELOAD ========================== */
        async function preloadKH(){ if(KH_CACHE) return KH_CACHE; if(Array.isArray(window.__KH_INIT)){ KH_CACHE=window.__KH_INIT; cacheSet('KH_CACHE',KH_CACHE); return KH_CACHE;} KH_CACHE=cacheGet('KH_CACHE')||[]; return KH_CACHE; }
        async function preloadSP(){ if(SP_CACHE) return SP_CACHE; if(Array.isArray(window.__SP_INIT)){ SP_CACHE=window.__SP_INIT; cacheSet('SP_CACHE',SP_CACHE); return SP_CACHE;} SP_CACHE=cacheGet('SP_CACHE')||[]; return SP_CACHE; }
        async function preloadGB(){ if(GB_CACHE) return GB_CACHE; if(Array.isArray(window.__GB_INIT)){ GB_CACHE=window.__GB_INIT; cacheSet('GB_CACHE',GB_CACHE); return GB_CACHE;} GB_CACHE=cacheGet('GB_CACHE')||[]; return GB_CACHE; }
        async function preloadVoucher(){ if(VOUCHER_CACHE) return VOUCHER_CACHE; if(Array.isArray(window.__VOUCHER_INIT)){ VOUCHER_CACHE=window.__VOUCHER_INIT; cacheSet('VOUCHER_CACHE',VOUCHER_CACHE); return VOUCHER_CACHE;} VOUCHER_CACHE=cacheGet('VOUCHER_CACHE')||[]; return VOUCHER_CACHE; }

        /* ========================== INDEXERS ========================== */
        function buildKHIndex(list){ for(const k of list){ const ten=k.ten??k.Ten??''; const sdt=(k.Phones?.[0]?.SoDienThoai || k.phones?.[0]?.soDienThoai || k.soDienThoai || k.SoDienThoai || '')+''; const keys=makeSearchKeys(ten);
          k._nxTen=normalize(ten); k._nxSdt=(sdt||'').toLowerCase(); k._tokens=keys.tokens; k._initials=keys.initials; k._compact=keys.compact; k._order=typeof k.ThuTu==='number'?k.ThuTu:0; } return list; }
        function buildSPIndex(list){ for(const sp of list){ const ten=sp.ten??sp.Ten??''; const keys=makeSearchKeys(ten); sp._nxTen=normalize(ten);
          const btTokens=(sp.BienThe||sp.bienThe||[]).map(bt=>bt.tenBienThe||bt.TenBienThe||'').flatMap(tokenize);
          sp._tokens=[...new Set([...keys.tokens, ...btTokens])]; sp._initials=keys.initials; sp._compact=keys.compact;
          sp._sold=typeof sp.DaBan==='number'?sp.DaBan:0;
          sp._bts=(sp.BienThe||sp.bienThe||[]).map(bt=>({Id:bt.Id??bt.id,TenBienThe:bt.TenBienThe??bt.tenBienThe??'Size Chuẩn',GiaBan:bt.GiaBan??bt.giaBan??0})).sort((a,b)=>a.GiaBan-b.GiaBan);
          sp._firstBt=sp._bts[0]||{Id:sp.id||sp.Id, TenBienThe:'Size Chuẩn', GiaBan:sp.giaBan||0};
          sp._id=sp.id??sp.Id; sp._ten=ten; } return list; }
        function buildGBIndex(list){ const byKh={}; for(const r of list){ const kh=r.KhachHangId||r.khachHangId; if(!kh) continue; if(!byKh[kh]) byKh[kh]={byBt:{},bySp:{}}; const btId=r.SanPhamBienTheId||r.sanPhamBienTheId||null; const spId=r.SanPhamId||r.sanPhamId||null; const gia=r.GiaBan||r.giaBan||0; if(btId) byKh[kh].byBt[btId]=gia; else if(spId) byKh[kh].bySp[spId]=gia; } GB_INDEX=byKh; return GB_INDEX; }

        /* ========================== COUNT WPF (loại nhóm SP) ========================== */
        const WPF_EXCLUDED_GROUPS=new Set(["thuoc la","nuoc lon","an vat"]);
        function getSpByIdStrict(id){ return (SP_CACHE||[]).find(x=>(x.Id||x.id)===id)||null; }
        function getGroupNameForSp(sp){ return (sp?.TenNhomSanPham ?? sp?.tenNhomSanPham ?? sp?.NhomSanPham?.Ten ?? sp?.Nhom?.Ten ?? sp?.Category?.Name ?? "").toString(); }
        function isExcludedLineWpf(ln){ const sp=getSpByIdStrict(ln.idSanPham); if(!sp) return false; const g=getGroupNameForSp(sp); const gNorm=noAccent(g).trim(); return WPF_EXCLUDED_GROUPS.has(gNorm); }
        function updateMonCountBadgeWpf(){ let count=0; for(const ln of lines){ if(isExcludedLineWpf(ln)) continue; count+=(ln.soLuong||0);} el('TongSo').innerText=`${count} món`; }

        /* ========================== PORTAL ========================== */
        const _portal=document.createElement('div'); _portal.className='portal-list list-group small'; document.body.appendChild(_portal);
        let _portalOwner=null;
        function portalHide(){ _portal.classList.remove('show'); _portalOwner=null; _portal.innerHTML=''; }
         function portalShowFor(input, items, renderItem, onPick){
          _portalOwner = input;
          _portal.innerHTML = '';

          if (!items || !items.length){
            const d = document.createElement('div');
            d.className = 'portal-item text-muted';
            d.textContent = 'Không có dữ liệu phù hợp';
            _portal.appendChild(d);
          } else {
            items.forEach(it => {
              const row = document.createElement('div');
              row.className = 'portal-item list-group-item-action';
              row.innerHTML = renderItem(it);

              const pick = e => {
                e.preventDefault();
                e.stopPropagation();
                onPick(it);
                portalHide();
              };
              row.addEventListener('mousedown', pick);
              row.addEventListener('touchstart', pick, { passive: false });

              _portal.appendChild(row);
            });
          }

          // === Đặt vị trí theo visualViewport (iOS) hoặc scroll (trình duyệt khác) ===
          const rc = input.getBoundingClientRect();
          const vv = window.visualViewport;
          const vp = {
            x: vv ? vv.offsetLeft : window.scrollX,
            y: vv ? vv.offsetTop  : window.scrollY,
            w: vv ? vv.width      : window.innerWidth,
            h: vv ? vv.height     : window.innerHeight
          };

          _portal.style.width = rc.width + 'px';

          // chiều cao ước lượng của list (tối đa 40% chiều cao viewport)
          const approx = Math.min(_portal.scrollHeight || 240, Math.round(vp.h * 0.4));

          // mặc định: đặt dưới ô gõ
          let top  = vp.y + rc.bottom + 6;
          let left = vp.x + Math.max(8, Math.min(rc.left, vp.w - rc.width - 8));

          // nếu không đủ chỗ phía dưới, lật lên phía trên ô gõ
          if (top + approx > vp.y + vp.h - 8) {
            top = vp.y + Math.max(8, rc.top - approx - 6);
          }

          _portal.style.top  = `${top}px`;
          _portal.style.left = `${left}px`;
          _portal.classList.add('show');
        }
        
        // ['scroll','resize','orientationchange'].forEach(ev=>window.addEventListener(ev,()=>{ if(_portalOwner) portalHide(); },{passive:true}));
        // document.addEventListener('click',e=>{ if(_portalOwner && !e.target.closest('.portal-list')) portalHide(); });
        ['scroll','resize','orientationchange'].forEach(ev =>
            window.addEventListener(ev, ()=>{ if(_portalOwner) portalHide(); }, {passive:true})
          );
          if (window.visualViewport) {
            ['resize','scroll'].forEach(ev =>
              window.visualViewport.addEventListener(ev, ()=>{ if(_portalOwner) portalHide(); }, {passive:true})
            );
          }

        /* ========================== BIẾN THỂ & GIÁ ========================== */
        function getBts(sp){ if(sp?._bts && Array.isArray(sp._bts)) return sp._bts;
          const b=(sp?.BienThe||sp?.bienThe||[]).map(bt=>({Id:bt.Id??bt.id,TenBienThe:bt.TenBienThe??bt.tenBienThe??'Size Chuẩn',GiaBan:bt.GiaBan??bt.giaBan??0})).sort((a,b)=>a.GiaBan-b.GiaBan);
          return b;
        }
        function getDefaultBt(sp){ const b=getBts(sp); return b[0]||{Id:sp.Id||sp.id, TenBienThe:'Size Chuẩn', GiaBan:sp.giaBan||0}; }
        function getSecondBt(sp){ const b=getBts(sp); return b.length>1? b[1]:null; }
        function getGiaBanThucTe(sp, bt){
          const fallback=(bt?.GiaBan||0); if(!khId||!GB_INDEX) return fallback;
          const map=GB_INDEX[khId]; if(!map) return fallback; const btId=bt?.Id||bt?.id, spId=sp?.Id||sp?.id;
          if(btId && map.byBt[btId]!=null) return map.byBt[btId]; if(spId && map.bySp[spId]!=null) return map.bySp[spId]; return fallback;
        }

        /* ========================== THÊM DÒNG ========================== */
            function addLineFromSanPhamVariant(sp, bt){
          const useBt = bt || getDefaultBt(sp);

          lines.push({
            idSanPham:  sp.Id||sp.id,
            idBienThe:  useBt.Id,
            tenSanPham: sp.Ten||sp.ten,
            tenBienThe: useBt.TenBienThe||'',
            soLuong:    1,
            donGia:     getGiaBanThucTe(sp, useBt),
            note:       '',
            toppings:   [],
            topTotal:   0
          });

          renderLines();
          recalc();
          updateMonCountBadgeWpf();
          touchChanged();

          // ✅ Feedback tức thì
          const shortName = (sp.Ten||sp.ten||'').toString();
          const btName    = (useBt.TenBienThe||'').toString();
          showAddedToast(`Đã thêm: ${shortName}${btName? ' ('+btName+')':''}`);

          // Badge “X món” nháy nhẹ
          pulseCountBadge();

          // Cố gắng đưa dòng mới vào khung nhìn (không làm mất focus ô tìm)
          const list = document.getElementById('Lines');
          setTimeout(()=>{ list?.lastElementChild?.scrollIntoView({block:'nearest', behavior:'smooth'}); }, 0);
        }
        
        function addLineFromSanPham(sp){ addLineFromSanPhamVariant(sp, getDefaultBt(sp)); }

        /* ========================== KHÁCH HÀNG ========================== */
        function getPhone(k){ return (k.Phones?.[0]?.SoDienThoai || k.phones?.[0]?.soDienThoai || k.soDienThoai || k.SoDienThoai || '')+''; }
        function getAddress(k){ return (k.Addresses?.[0]?.DiaChi || k.addresses?.[0]?.diaChi || k.diaChi || k.DiaChi || '')+''; }

        const khInput=el('KhachHangText'); khInput.setAttribute('autocomplete','off'); khInput.setAttribute('autocapitalize','off'); khInput.setAttribute('spellcheck','false');
        const khClearBtn = el('KhachHangClear');
        khInput.addEventListener('input', () => { khClearBtn?.classList.toggle('d-none', !(khInput.value?.trim())); });
        khInput.addEventListener('keydown', (e) => { if (e.key === 'Escape' && khInput.value?.length) { clearKhInput(); e.preventDefault(); } });

        // Xoá nhanh KH
        function clearKhInput(){
          hideFavoritePointsUI();
          khInput.value = '';
          khId = null;
          khProfile = { addresses: [], phones: [] };
          el('DienThoai').value = '';
          el('DiaChi').value = '';
          refreshPickButtons?.();
          renderFavoriteChips?.([]);
          const lp = el('LoyaltyPanel'); if (lp) lp.classList.add('d-none');
          congNoCurrent = 0;
          el('CongNoView')    && (el('CongNoView').innerText = '0');
          el('CongNoDisplay') && (el('CongNoDisplay').innerText = '0');
          portalHide?.();
          khClearBtn?.classList.add('d-none');
          khInput.focus();
          recalc?.();
          touchChanged?.();
        }

        async function loadCustomerInfo(khGuid){
          if(!khGuid) { hideFavoritePointsUI(); return; }
          try{
            const r = await fetch(`?handler=KhInfo&id=${encodeURIComponent(khGuid)}`, { credentials:'include' });
            if(!r.ok){ hideFavoritePointsUI(); return; }
            const info=await r.json();

            const tongNo=info?.TongNo ?? info?.tongNo ?? 0;
            const diemNay=info?.DiemThangNay ?? info?.diemThangNay ?? 0;
            const diemTruoc=info?.DiemThangTruoc ?? info?.diemThangTruoc ?? 0;
            const daNhanVoucher=info?.DaNhanVoucher ?? info?.daNhanVoucher ?? false;
            const duocNhanVoucher=info?.DuocNhanVoucher ?? info?.duocNhanVoucher ?? false;

            // Panel loyalty
            el('LoyaltyPanel').classList.remove('d-none');
            el('TongNo').innerText=fmt(tongNo);

            // >>> HIỂN THỊ GIỐNG WPF: "điểm/100 (★…☆)"
            el('DiemThangNay').innerText   = starText(diemNay);
            el('DiemThangTruoc').innerText = starText(diemTruoc);

            // Badge + blink khi đủ điều kiện và chưa nhận
            el('VoucherBlink').classList.toggle('d-none', !(duocNhanVoucher && !daNhanVoucher));
            const prevEl = el('DiemThangTruoc');
            if (duocNhanVoucher && !daNhanVoucher) { prevEl?.classList.add('blink'); } else { prevEl?.classList.remove('blink'); }

            congNoCurrent=Number(tongNo||0);
            el('CongNoView').innerText=fmt(congNoCurrent);
            el('CongNoDisplay').innerText=fmt(congNoCurrent);

            // Save state
            loyaltyState = { duocNhan: !!(duocNhanVoucher && !daNhanVoucher), daNhan: !!daNhanVoucher, diemNay:Number(diemNay||0), diemTruoc:Number(diemTruoc||0) };

            recalc();
          }catch{
            hideFavoritePointsUI();
          }
        }
        function updateFavoritePointsUI(nowPts = 0, prevPts = 0){ hideFavoritePointsUI(); }
        function hideFavoritePointsUI(){ const wrap = el('FavoriteWrap'); if (wrap) wrap.classList.add('d-none'); }

        /* Gợi ý theo KH */
        function getFavoriteItemsFromKH(k){
          const ids=k.FavoriteSanPhamIds||k.favoriteSanPhamIds||null;
          const namesRaw=k.FavoriteMon||k.favoriteMon||'';
          const names=namesRaw? namesRaw.split(/[;,]/).map(s=>s.trim()).filter(Boolean):[];
          return { ids, names };
        }
        function mapFavByIds(ids){
          const list=[]; if(!Array.isArray(ids) || !SP_CACHE) return list;
          const seen=new Set();
          for(const id of ids){
            const sp=SP_CACHE.find(x=>(x.Id||x.id)===id);
            if(sp){ const key=sp.Id||sp.id; if(!seen.has(key)){ seen.add(key); list.push(sp); } }
          }
          return list;
        }
        function mapFavByNames(names){
          const list=[]; if(!Array.isArray(names) || !SP_CACHE) return list;
          const idx=(SP_CACHE._nameIdx ||= (()=>{const m=new Map(); for(const sp of SP_CACHE){ m.set(noAccent((sp.Ten||sp.ten||'').trim()), sp);} return m; })());
          const seen=new Set();
          for(const raw of names){
            const q=noAccent(raw);
            let sp = idx.get(q) || SP_CACHE.find(sp=>noAccent(sp.Ten||sp.ten||'').startsWith(q)) || SP_CACHE.find(sp=>noAccent(sp.Ten||sp.ten||'').includes(q));
            if(sp){ const key=sp.Id||sp.id; if(!seen.has(key)){ seen.add(key); list.push(sp); } }
          }
          return list;
        }
        function renderFavoriteChips(spList){
          const wrap=el('FavoriteWrap'), span=el('FavoriteMon');
          if(!spList?.length){ wrap.classList.add('d-none'); span.innerHTML=''; return; }
          span.innerHTML='';
          spList.forEach(sp=>{
            const name=sp.Ten||sp.ten||'';
            const btn=document.createElement('button');
            btn.type='button'; btn.className='btn btn-sm btn-outline-primary me-1 mb-1';
            btn.textContent=name; btn.onclick=()=>{ addLineFromSanPhamVariant(sp, getDefaultBt(sp)); };
            span.appendChild(btn);
          });
          wrap.classList.remove('d-none');
        }

        khInput.addEventListener('input', debounce(async ()=>{
          const q = khInput.value.trim();
          if(q.length < 1){ portalHide(); return; }
          const list = await searchKHOnline(q);

          portalShowFor(khInput, list, k=>{
            const name = k.ten || k.Ten || '';
            const phone = (k.Phones?.[0]?.SoDienThoai || k.phones?.[0]?.soDienThoai || '') + '';
            const addr  = (k.Addresses?.[0]?.DiaChi || k.addresses?.[0]?.diaChi || '') + '';
            return `<div class="d-flex flex-column">
              <div class="d-flex justify-content-between align-items-center">
                <strong class="me-2">${name}</strong><small>${phone || '<span class="text-muted">—</span>'}</small>
              </div>
              <div class="small text-muted text-clip-1">${addr || '—'}</div></div>`;
          }, async k=>{
            khId = k.id || k.Id || null;
            khInput.value = k.ten || k.Ten || '';
            khProfile.addresses = (k.Addresses || k.addresses || []).map(a=>a.DiaChi || a.diaChi || '').filter(Boolean);
            khProfile.phones    = (k.Phones || k.phones || []).map(p=>p.SoDienThoai || p.soDienThoai || '').filter(Boolean);
            el('DienThoai').value = khProfile.phones?.[0] || '';
            el('DiaChi').value    = khProfile.addresses?.[0] || '';
            refreshPickButtons();

            // gợi ý theo KH
            const fav = getFavoriteItemsFromKH(k);
            let spList = [];
            if (fav.ids && fav.ids.length) spList = spList.concat(mapFavByIds(fav.ids));
            if (fav.names && fav.names.length) spList = spList.concat(mapFavByNames(fav.names));
            { const seen=new Set(); spList=spList.filter(sp=>{const key=sp.Id||sp.id; if(seen.has(key)) return false; seen.add(key); return true;}); }
            renderFavoriteChips(spList);

            repriceAllLinesForCurrentCustomer();
            await loadCustomerInfo(khId);
            touchChanged();
          });
        }, 220));

        function getPhonesFromProfile(){ return (khProfile?.phones||[]).map(p=>(p||'').toString().trim()).filter((v,i,a)=>v&&a.indexOf(v)===i); }
        function getAddressesFromProfile(){ return (khProfile?.addresses||[]).map(a=>(a||'').toString().trim()).filter((v,i,a)=>v&&a.indexOf(v)===i); }
        function refreshPickButtons(){
          const p=getPhonesFromProfile(), a=getAddressesFromProfile();
          const phoneBtn=el('PickPhoneBtn'), addrBtn=el('PickAddrBtn');
          if(phoneBtn){ phoneBtn.style.display=p.length>0?'':'none'; phoneBtn.disabled=p.length<=1 && ((el('DienThoai').value||'')===(p[0]||'')); }
          if(addrBtn){ addrBtn.style.display=a.length>0?'':'none'; addrBtn.disabled=a.length<=1 && ((el('DiaChi').value||'')===(a[0]||'')); }
        }
        function openPickerForInput(inputEl, items){
          portalShowFor(inputEl,items||[],v=>`<div class="d-flex justify-content-between"><span>${v}</span><small class="text-muted">chọn</small></div>`,v=>{ inputEl.value=v; touchChanged(); });
        }
        document.addEventListener('click',e=>{
          if(e.target.closest('#PickPhoneBtn')) openPickerForInput(el('DienThoai'), getPhonesFromProfile());
          if(e.target.closest('#PickAddrBtn'))  openPickerForInput(el('DiaChi'), getAddressesFromProfile());
        });



        const spInput=el('SearchSanPham');
         function portalShowForSanPham(input, spList){
          _portalOwner = input;
          _portal.innerHTML = '';

          if (!spList || !spList.length){
            const d = document.createElement('div');
            d.className = 'portal-item text-muted';
            d.textContent = 'Không có dữ liệu phù hợp';
            _portal.appendChild(d);
          } else {
            spList.forEach(sp => {
              const row = document.createElement('div');
              row.className = 'portal-item list-group-item-action';

              const defaultBt = getDefaultBt(sp);
              const secondBt  = getSecondBt(sp);

              // Top line only (Tên + giá pick nhanh) — đã BỎ dòng liệt kê biến thể
              const top  = document.createElement('div');
              top.className = 'd-flex align-items-center justify-content-between';

              const leftBtn  = document.createElement('div');
              leftBtn.className = 'pick-name fw-semibold';
              leftBtn.textContent = sp.Ten || sp.ten || '';

              const rightBtn = document.createElement('div');
              rightBtn.className = 'pick-price text-muted';
              if (secondBt){
                rightBtn.textContent = fmt(secondBt.GiaBan);
                rightBtn.title = `${secondBt.TenBienThe}`;
              } else {
                rightBtn.textContent = '';
              }

              top.appendChild(leftBtn);
              top.appendChild(rightBtn);
              row.appendChild(top);

              _portal.appendChild(row);

              const attach = (el, fn) => {
                el.addEventListener('mousedown', e => { e.preventDefault(); e.stopPropagation(); fn(); portalHide(); });
                el.addEventListener('touchstart', e => { e.preventDefault(); e.stopPropagation(); fn(); portalHide(); }, { passive: false });
              };
              attach(leftBtn,  () => addLineFromSanPhamVariant(sp, defaultBt));
              if (secondBt) attach(rightBtn, () => addLineFromSanPhamVariant(sp, secondBt));
            });
          }

          // Position using visualViewport (iOS) or window scroll (others)
          const rc = input.getBoundingClientRect();
          const vv = window.visualViewport;
          const vp = {
            x: vv ? vv.offsetLeft : window.scrollX,
            y: vv ? vv.offsetTop  : window.scrollY,
            w: vv ? vv.width      : window.innerWidth,
            h: vv ? vv.height     : window.innerHeight
          };

          _portal.style.width = rc.width + 'px';
          const approx = Math.min(_portal.scrollHeight || 240, Math.round(vp.h * 0.4));

          let top  = vp.y + rc.bottom + 6;
          let left = vp.x + Math.max(8, Math.min(rc.left, vp.w - rc.width - 8));

          if (top + approx > vp.y + vp.h - 8) {
            top = vp.y + Math.max(8, rc.top - approx - 6);
          }

          _portal.style.top  = `${top}px`;
          _portal.style.left = `${left}px`;
          _portal.classList.add('show');
        }
spInput.addEventListener('input', debounce(async ()=>{
  const q = spInput.value.trim();
  if (q.length < 1) { portalHide(); return; }
  const list = await searchSPOnline(q);   // ✅ chỉ gọi server
  portalShowForSanPham(spInput, list);
}, 220));
        /* ========================== MODAL ⚙ (ghi chú + topping) ========================== */
        function getToppings(sp){
          const list = sp?.Toppings || sp?.toppings || [];
          return (Array.isArray(list)? list: []).map(t=>({
            Id: t.Id??t.id??t.ToppingId??t.toppingId,
            Ten: t.Ten??t.ten??t.TenTopping??t.tenTopping??'Topping',
            Gia: t.Gia??t.gia??t.GiaBan??t.giaBan??0
          }));
        }
        function renderModalNotes(ln){
          const wrap=el('ModalNotes'); wrap.innerHTML='';
          COMMON_NOTES.forEach(n=>{
            const b=document.createElement('span'); b.className='note-chip'; b.textContent=n;
            if((ln.note||'').includes(n)) b.classList.add('active');
            b.onclick=()=>{ b.classList.toggle('active'); };
            wrap.appendChild(b);
          });
        }
        function renderModalToppings(ln, sp){
          const wrap=el('ModalToppings'); wrap.innerHTML='';
          const src=getToppings(sp);
          if(!src.length){ wrap.innerHTML='<div class="text-muted small">Không có topping</div>'; el('ModalTopTotal').innerText='0'; return; }
          const cur = new Map((ln.toppings||[]).map(t=>[t.Id,{...t}]));
          const recalcTop=()=>{
            let sum=0; src.forEach(t=>{ const q=(cur.get(t.Id)?.Qty)||0; sum += q * (t.Gia||0); });
            el('ModalTopTotal').innerText = fmt(sum);
          };
          src.forEach(tp=>{
            const row=document.createElement('div'); row.className='topping-row';
            const name=document.createElement('div'); name.className='flex-fill'; name.innerHTML=`${tp.Ten} <span class="text-muted">(${fmt(tp.Gia)}đ)</span>`;
            const qty=document.createElement('div'); qty.className='topping-qty btn-group';
            const minus=document.createElement('button'); minus.type='button'; minus.className='btn btn-outline-secondary btn-sm'; minus.innerHTML='<i class="fa fa-minus"></i>';
            const input=document.createElement('input'); input.type='number'; input.min='0'; input.className='form-control form-control-sm text-center'; input.style.width='56px'; input.value=cur.get(tp.Id)?.Qty||0;
            const plus=document.createElement('button'); plus.type='button'; plus.className='btn btn-outline-secondary btn-sm'; plus.innerHTML='<i class="fa fa-plus"></i>';
            qty.appendChild(minus); qty.appendChild(input); qty.appendChild(plus);
            row.appendChild(name); row.appendChild(qty); wrap.appendChild(row);
            const setQ = (v)=>{ const q=Math.max(0, parseInt(v||0)); if(q===0) cur.delete(tp.Id); else cur.set(tp.Id,{Id:tp.Id,Ten:tp.Ten,Gia:tp.Gia,Qty:q}); input.value=q; recalcTop(); };
            minus.onclick=()=>setQ((parseInt(input.value||0)-1));
            plus.onclick =()=>setQ((parseInt(input.value||0)+1));
            input.oninput=()=>setQ(input.value);
          });
          recalcTop();
        }

        function openLineModal(i){
          modalIdx=i; const ln=lines[i];
          const sp=(SP_CACHE||[]).find(x=>(x.id||x.Id)===(ln.idSanPham));
          const sel=el('ModalBienThe'); sel.innerHTML='';
          (getBts(sp)||[]).forEach(bt=>{ const o=document.createElement('option'); o.value=bt.Id; o.text=`${bt.TenBienThe} (${fmt(bt.GiaBan)}đ)`; if(bt.Id===ln.idBienThe) o.selected=true; sel.appendChild(o); });
          renderModalNotes(ln);
          el('ModalNote').value = ln.note || '';
          renderModalToppings(ln, sp);

          const modalEl=el('lineModal');
          const instance=bootstrap.Modal.getOrCreateInstance(modalEl,{backdrop:'static',keyboard:true});
          instance.show();
        }
        function applyModal(){
          if(modalIdx<0) return; const ln=lines[modalIdx];
          const opt=el('ModalBienThe').selectedOptions[0];
          ln.idBienThe=opt.value; ln.tenBienThe=opt.text.split(' (')[0];
          const sp=(SP_CACHE||[]).find(x=>(x.id||x.Id)===ln.idSanPham);
          const bt=(getBts(sp)||[]).find(b=>b.Id===ln.idBienThe) || {Id:ln.idBienThe, GiaBan:ln.donGia, TenBienThe:ln.tenBienThe};
          ln.donGia=getGiaBanThucTe(sp, bt);

          // notes
          const chips=[...el('ModalNotes').querySelectorAll('.note-chip.active')].map(x=>x.textContent.trim());
          const free=el('ModalNote').value?.trim()||'';
          ln.note=[...chips, free].filter(Boolean).join('; ');

          // toppings
          const rows=el('ModalToppings').querySelectorAll('.topping-row');
          const picked=[];
          rows.forEach(r=>{
            const nameTxt=r.querySelector('.flex-fill').childNodes[0].nodeValue.trim();
            const priceText=r.querySelector('.flex-fill .text-muted')?.textContent||'(0)';
            const price=parseMoney(priceText);
            const qty=parseInt(r.querySelector('input')?.value||0);
            const id = nameTxt + ':' + price; // fallback id
            if(qty>0) picked.push({Id:id, Ten:nameTxt, Gia:price, Qty:qty});
          });
          ln.toppings=picked;
          ln.topTotal=(picked||[]).reduce((s,t)=>s+(t.Gia||0)*(t.Qty||0),0);

          bootstrap.Modal.getInstance(el('lineModal'))?.hide();
          renderLines(); recalc(); updateMonCountBadgeWpf(); touchChanged();
        }

        /* ========================== DÒNG & HÀNH ĐỘNG ========================== */
        function lineAmount(ln){ return (ln.soLuong||0)*(ln.donGia||0) + (ln.topTotal||0); }

        function autoMatchVariantByPrice(i){
          const ln=lines[i]; const sp=(SP_CACHE||[]).find(x=>(x.id||x.Id)===ln.idSanPham); if(!sp) return;
          const candidates=getBts(sp);
          for(const bt of candidates){
            const eff=getGiaBanThucTe(sp, bt);
            if(eff === ln.donGia){
              ln.idBienThe=bt.Id;
              ln.tenBienThe=bt.TenBienThe||'';
              const vEl=document.getElementById(`LineVariant_${i}`); if(vEl) vEl.textContent = ln.tenBienThe || '';
              const row=document.getElementById(`LineName_${i}`); if(row){ row.classList.add('blink'); setTimeout(()=>row.classList.remove('blink'),300); }
              break;
            }
          }
        }
        function incrementQty(i, delta){
          const ln=lines[i]; ln.soLuong=Math.max(0,(ln.soLuong||0)+delta);
          const input=el(`Qty_${i}`); if(input) input.value=ln.soLuong;
          updateLineTotal(i); recalc(); updateMonCountBadgeWpf(); touchChanged();
        }
        function adjustPrice(i, delta){
          const ln=lines[i]; ln.donGia=Math.max(0,(ln.donGia||0)+delta);
          const input=el(`Price_${i}`); if(input){ input.value=fmt(ln.donGia); }
          autoMatchVariantByPrice(i);
          updateLineTotal(i); recalc(); touchChanged();
        }
        function updateLineTotal(i){
          const ln=lines[i]; const elTotal=el(`LineTotal_${i}`); if(elTotal) elTotal.innerText=fmt(lineAmount(ln));
        }

        function renderLines(){
          const wrap=el('Lines'); wrap.innerHTML='';
          lines.forEach((ln,i)=>{
            const row=document.createElement('div'); row.className='list-group-item';
            const lineTotal=fmt(lineAmount(ln));
            row.innerHTML = `
              <div class="d-flex flex-column gap-1">
                <div class="d-flex align-items-center">
                  <div class="flex-fill" id="LineName_${i}">
                    <strong>${ln.tenSanPham}</strong>
                    <span id="LineVariant_${i}" class="text-danger">${ln.tenBienThe||''}</span>
                    <div class="small text-muted">${ln.note||''}</div>
                  </div>
                  <div class="text-end" style="min-width:120px"><strong id="LineTotal_${i}">${lineTotal}</strong></div>
                </div>
                <div class="d-flex align-items-center gap-2 flex-wrap">
                  <div class="btn-group" role="group" aria-label="qty">
                    <button class="btn btn-outline-secondary btn-sm" onclick="incrementQty(${i},-1)"><i class="fa fa-minus"></i></button>
                    <input id="Qty_${i}" type="number" min="0" class="form-control form-control-sm text-center" style="width:56px" value="${ln.soLuong}"
                           oninput="lines[${i}].soLuong=parseInt(this.value||0); updateLineTotal(${i}); recalc(); updateMonCountBadgeWpf(); touchChanged();" />
                    <button class="btn btn-outline-secondary btn-sm" onclick="incrementQty(${i},+1)"><i class="fa fa-plus"></i></button>
                  </div>

                  <div class="input-group input-group-sm" style="width:140px">
                    <button class="btn btn-outline-secondary" title="-5.000" onclick="adjustPrice(${i},-5000)"><i class="fa fa-caret-down"></i></button>
                    <input id="Price_${i}" inputmode="numeric" class="form-control text-end" value="${fmt(ln.donGia)}"
                           oninput="lines[${i}].donGia=parseMoney(this.value); updateLineTotal(${i});"
                           onblur="lines[${i}].donGia=parseMoney(this.value); this.value=fmt(lines[${i}].donGia); autoMatchVariantByPrice(${i}); updateLineTotal(${i}); recalc(); touchChanged();" />
                    <button class="btn btn-outline-secondary" title="+5.000" onclick="adjustPrice(${i},+5000)"><i class="fa fa-caret-up"></i></button>
                  </div>

                  <div class="btn-group ms-auto">
                    <button class="btn btn-outline-secondary btn-sm" onclick="openLineModal(${i})" title="Tuỳ chỉnh"><i class="fa fa-sliders"></i></button>
                    <button class="btn btn-outline-danger btn-sm" onclick="lines.splice(${i},1); renderLines(); recalc(); updateMonCountBadgeWpf(); touchChanged();" title="Xoá"><i class="fa fa-xmark"></i></button>
                  </div>
                </div>
              </div>`;
            wrap.appendChild(row);
          });
          updateMonCountBadgeWpf();
        }

        /* ========================== REPRICE WHEN CHANGE CUSTOMER ========================== */
        function repriceAllLinesForCurrentCustomer(){
          if (!lines.length) return;
          for (let i=0;i<lines.length;i++){
            const ln=lines[i];
            const sp=(SP_CACHE||[]).find(x=>(x.id||x.Id)===ln.idSanPham);
            const bt=(sp?.BienThe||sp?.bienThe||[]).find(b=>(b.Id||b.id)===ln.idBienThe) || { Id: ln.idBienThe, GiaBan: ln.donGia, TenBienThe: ln.tenBienThe };
            ln.donGia = getGiaBanThucTe(sp, bt);
            autoMatchVariantByPrice(i);
          }
          renderLines(); recalc(); touchChanged();
        }

        /* ========================== VOUCHER + TÍNH TIỀN + CÔNG NỢ ========================== */
        function findEligibleVoucherForPoint(){
          const list = VOUCHER_CACHE || [];
          if (!Array.isArray(list) || list.length===0) return null;
          const prefer = list.find(v=>{
            const ten = (v.Ten || v.ten || '').toLowerCase();
            const loai= (v.Loai || v.loai || '').toLowerCase();
            return ten.includes('điểm') || ten.includes('diem') || ten.includes('loyalty') || ten.includes('tặng') || ten.includes('tang') || loai.includes('loyalty');
          });
          return prefer || list[0] || null;
        }
        function applyVoucherByEligibility(){
          if (!loyaltyState.duocNhan || loyaltyState.daNhan){
            alert('Khách hiện KHÔNG đủ điều kiện nhận voucher theo điểm.');
            return;
          }
          const pick = findEligibleVoucherForPoint();
          if(!pick){ alert('Không tìm thấy voucher phù hợp để áp dụng.'); return; }
          const sel=el('VoucherId'); if(sel){ sel.value=(pick.Id||pick.id||'').toString(); sel.dispatchEvent(new Event('change')); }
          el('SaveHint').innerText='✅ Đã áp dụng voucher theo điểm.';
        }
        function calcVoucherDiscount(tamTinh){
          const id = el('VoucherId').value || '';
          if(!id){ const ggFix = parseMoney(el('GiamGiaFix').value); return Math.min(tamTinh, ggFix); }
          const v = (VOUCHER_CACHE||[]).find(x => (x.Id||x.id||'') == id); if(!v) return 0;
          const kind = (v.KieuGiam ?? v.kieuGiam ?? v.Kieu ?? v.kieu ?? '').toString().toLowerCase();
          const raw  = Number(v.GiaTri ?? v.giaTri ?? v.Value ?? v.value ?? 0) || 0;
          let disc=0;
          if(kind.includes('%') || kind.includes('percent') || kind==='phantram') disc = tamTinh * raw / 100;
          else disc = raw;
          disc = Math.min(tamTinh, round1000(disc, 'nearest'));
          return disc;
        }
        function recalc(){
          let tamTinh=0; lines.forEach(l=> tamTinh += (l.soLuong||0)*(l.donGia||0) + (l.topTotal||0));
          const giamGia = calcVoucherDiscount(tamTinh);
          const thanh   = Math.max(0, tamTinh - giamGia);

          el('TongTien').innerText=fmt(tamTinh);
          el('GiamGia').innerText=fmt(giamGia);
          el('ThanhTien').innerText=fmt(thanh);

          el('CongNoDisplay') && (el('CongNoDisplay').innerText=fmt(congNoCurrent));
          el('TongPhaiThu') && (el('TongPhaiThu').innerText=fmt(thanh + (congNoCurrent||0)));

          const hasVoucher = !!(el('VoucherId').value||'');
          el('GiamGiaFix').disabled = hasVoucher;
        }
        ['GiamGiaFix'].forEach(id=> el(id).addEventListener('input',()=>{recalc();touchChanged();}));
        el('VoucherId').addEventListener('change',()=>{ recalc(); touchChanged(); });

        /* ========================== SAVE ========================== */
        function currentLoaiDon(){ if(el('ld_taicho').checked) return 'TaiCho'; if(el('ld_muave').checked) return 'MuaVe'; if(el('ld_ship').checked) return 'Ship'; return 'App'; }
        ['ld_taicho','ld_muave','ld_ship','ld_app'].forEach(id=> el(id).addEventListener('change',()=>{ el('banWrap').style.display=el('ld_taicho').checked?'':'none'; touchChanged(); }));
        el('banWrap').style.display='none';

        function validateForm(){
          el('FormError').innerText='';
          if(currentLoaiDon()==='TaiCho' && !el('TenBan').value.trim()){ el('FormError').innerText='Tên bàn không được để trống.'; return false; }
          if(currentLoaiDon()==='Ship'){
            if(!el('DiaChi').value.trim()){ el('FormError').innerText='Địa chỉ không được để trống.'; return false; }
            if(!el('DienThoai').value.trim()){ el('FormError').innerText='SĐT không được để trống.'; return false; }
          }
          if(lines.length===0 || !lines.some(x=>(x.soLuong||0)>0)){ el('FormError').innerText='Chưa có sản phẩm nào.'; return false; }
          return true;
        }
        async function saveInvoice(isAuto=false){
          if(!validateForm()) return;
          const payload={
            LoaiDon: currentLoaiDon(),
            TenBan: el('ld_taicho').checked ? (el('TenBan').value||null) : null,
            KhachHangId: khId,
            KhachHangText: el('KhachHangText').value||null,
            DienThoaiText: el('DienThoai').value||null,
            DiaChiText: el('DiaChi').value||null,
            VoucherId: (el('VoucherId').value||'') || null,
            GiamGiaFix: parseMoney(el('GiamGiaFix').value)||0,
            CongNo: Number(congNoCurrent)||0,
            ChiTietHoaDons: lines.filter(l=>(l.soLuong||0)>0).map(l=>({
              SanPhamId: l.idSanPham,
              SanPhamIdBienThe: l.idBienThe,
              TenSanPham: l.tenSanPham,
              TenBienThe: l.tenBienThe,
              SoLuong: l.soLuong,
              DonGia: l.donGia,
              NoteText: l.note||null,
              ToppingDtos: (l.toppings||[]).map(t=>({ToppingId:t.Id, Ten:t.Ten, DonGia:t.Gia, SoLuong:t.Qty})),
              ToppingTotal: l.topTotal||0
            }))
          };
          const btn=el('SaveBtn'), old=btn.innerHTML; btn.disabled=true;
          btn.innerHTML=`<span class="spinner-border spinner-border-sm me-1"></span> ${isAuto?'Đang tự lưu...':'Đang lưu...'}`;
          showBusy(true);
          try{
            const r=await fetch('/api/HoaDon',{method:'POST',headers:{'Content-Type':'application/json'},credentials:'include',body:JSON.stringify(payload)});
            const j=await r.json();
            if(j?.isSuccess || j?.IsSuccess || j?.success){ unsaved=false; el('SaveHint').innerText=isAuto?'✅ Đã tự lưu.':'✅ Đã lưu.'; el('FormError').innerText=''; }
            else{ el('SaveHint').innerText=''; alert(j?.message || j?.Message || 'Không thể lưu hoá đơn.'); }
          }catch(e){ el('SaveHint').innerText=''; alert('Lỗi: '+(e?.message||e)); }
          finally{ btn.disabled=false; btn.innerHTML=old; showBusy(false); startAutosave(); }
        }

        /* ========================== INIT ========================== */
        function fillVoucherOptions(){
          const sel=el('VoucherId'); const list=VOUCHER_CACHE||[];
          sel.innerHTML='<option value="">-- Không áp dụng --</option>';
          list.forEach(v=>{ const id=v.Id||v.id; const ten=v.Ten||v.ten||''; const opt=document.createElement('option'); opt.value=id||''; opt.textContent=ten||'(voucher)'; sel.appendChild(opt); });
        }

        (function init(){
          if(Array.isArray(window.__KH_INIT)) cacheSet('KH_CACHE', window.__KH_INIT);
          if(Array.isArray(window.__SP_INIT)) cacheSet('SP_CACHE', window.__SP_INIT);
          if(Array.isArray(window.__GB_INIT)) cacheSet('GB_CACHE', window.__GB_INIT);
          if(Array.isArray(window.__VOUCHER_INIT)) cacheSet('VOUCHER_CACHE', window.__VOUCHER_INIT);

          preloadSP().then(r=>{ SP_CACHE=r; buildSPIndex(SP_CACHE); SP_CACHE._indexed=true; });
          preloadGB().then(r=>{ GB_CACHE=r; buildGBIndex(GB_CACHE); });
          preloadVoucher().then(r=>{
            VOUCHER_CACHE=r; fillVoucherOptions();

            // Gắn click vào "Điểm tháng trước" -> tự áp voucher đúng giá trị (giống WPF handler)
            const elPrev = document.getElementById('DiemThangTruoc');
            if (elPrev) {
              elPrev.addEventListener('click', () => {
                if (loyaltyState.diemTruoc < 0) { alert('Khách hàng này không thuộc diện được nhận voucher.'); return; }
                if (loyaltyState.daNhan) { alert('Khách hàng đã nhận voucher trong tháng này rồi.'); return; }

                const saoDay   = tinhSoSaoDay(loyaltyState.diemTruoc);
                const giaTriVc = tinhGiaTriVoucher(loyaltyState.diemTruoc);

                if (saoDay > 0 && giaTriVc > 0) {
                  const found = (VOUCHER_CACHE||[]).find(v => Number(v.GiaTri ?? v.giaTri ?? v.Value ?? v.value ?? 0) === giaTriVc);
                  if (found) {
                    const sel = document.getElementById('VoucherId');
                    sel.value = (found.Id || found.id || '').toString();
                    sel.dispatchEvent(new Event('change'));
                    alert(`Khách đủ ${saoDay} sao → đã áp dụng voucher ${fmt(giaTriVc)} đ.`);
                  } else {
                    alert(`Khách đủ ${saoDay} sao nhưng không tìm thấy voucher ${fmt(giaTriVc)} đ trong danh sách.`);
                  }
                } else {
                  alert('Khách chưa đủ điểm để nhận voucher.');
                }
              });
            }
          });

          // Nút áp dụng voucher theo điểm (giữ nguyên)
          const btnApply=document.getElementById('ApplyVoucherBtn');
          if(btnApply) btnApply.addEventListener('click', applyVoucherByEligibility);

          startAutosave(); recalc();
        })();

        /* ========================== SEARCH KH ONLINE ========================== */
        const KH_CACHE_LRU = new Map();
        async function searchKHOnline(q){
          if (!q || q.trim().length < 1) return [];
          const url = `?handler=SearchKH&q=${encodeURIComponent(q)}&take=30`;
          const res = await fetch(url, { credentials:'include' });
          if (!res.ok) return [];

          const j = await res.json();
          const data = j?.data || j || [];
          return Array.isArray(data) ? data : [];
        }
        /* ========================== SEARCH SP ONLINE ========================== */
async function searchSPOnline(q){
  if (!q || q.trim().length < 1) return [];
  const url = `?handler=SearchSp&q=${encodeURIComponent(q)}&take=30`;
  const res = await fetch(url, { credentials:'include' });
  if (!res.ok) return [];
  const j = await res.json();
  const data = j?.data || j || [];
  return Array.isArray(data) ? data : [];
}
        function _vp() {
            const vv = window.visualViewport;
            return {
              x: vv ? vv.offsetLeft : window.scrollX,
              y: vv ? vv.offsetTop  : window.scrollY,
              w: vv ? vv.width      : window.innerWidth,
              h: vv ? vv.height     : window.innerHeight
            };
          }
                    function _placePortalBelowInput(inputEl) {
            const rc = inputEl.getBoundingClientRect();
            const vp = _vp();

            _portal.style.width = rc.width + 'px';

            // chiều cao ước lượng của list (tối đa 40% chiều cao viewport)
            const approx = Math.min(_portal.scrollHeight || 240, Math.round(vp.h * 0.4));

            // mặc định: đặt dưới ô gõ
            let top  = vp.y + rc.bottom + 6;
            let left = vp.x + Math.max(8, Math.min(rc.left, vp.w - rc.width - 8));

            // nếu không đủ chỗ phía dưới, lật lên phía trên ô gõ
            if (top + approx > vp.y + vp.h - 8) {
              top = vp.y + Math.max(8, rc.top - approx - 6);
            }

            _portal.style.top  = `${top}px`;
            _portal.style.left = `${left}px`;
            _portal.classList.add('show');
          }
                  function showAddedToast(text){
          const box = document.getElementById('AddToast');
          const tx  = document.getElementById('AddToastText');
          if(!box || !tx) return;
          tx.textContent = text;

          // Đặt vị trí dựa theo visualViewport để luôn nằm TRÊN bàn phím iOS
          const vv = window.visualViewport;
          const x  = vv ? vv.offsetLeft : window.scrollX;
          const y  = vv ? vv.offsetTop  : window.scrollY;
          const w  = vv ? vv.width      : window.innerWidth;
          const h  = vv ? vv.height     : window.innerHeight;

          box.style.left = (x + w/2) + 'px';
          box.style.top  = (y + h - 72) + 'px';              // cách mép dưới ~72px

          box.classList.add('show');
          try{ navigator.vibrate && navigator.vibrate(15); }catch{}
          setTimeout(()=> box.classList.remove('show'), 1200);
        }
        function pulseCountBadge(){
          const b = document.getElementById('TongSo');
          if(!b) return;
          b.classList.add('pulse');
          setTimeout(()=> b.classList.remove('pulse'), 600);
        }
    </script>
}