@page
@model TraSuaAppWeb.Pages.DoanhThuThangModel
@{
    ViewData["Title"] = "Doanh Thu Tháng";
    var thang = Model.Thang;
    var nam = Model.Nam;

    var thangTruoc = thang == 1 ? 12 : thang - 1;
    var namTruoc = thang == 1 ? nam - 1 : nam;

    var thangSau = thang == 12 ? 1 : thang + 1;
    var namSau = thang == 12 ? nam + 1 : nam;
}

<div class="modal fade" id="hoaDonModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-body" id="hoaDonContent">
                <p>Đang tải dữ liệu...</p>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="chiTietModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-body" id="chiTietContent">
                <p>Đang tải dữ liệu...</p>
            </div>
        </div>
    </div>
</div>

<div class="d-flex justify-content-between align-items-center mb-3">
    <a class="btn btn-outline-primary" href="?Thang=@thangTruoc&Nam=@namTruoc">← Tháng trước</a>
    <button type="button" class="btn btn-light" onclick="captureImage()">
        @thang/@nam &#x1F4C5;
    </button>
    <a class="btn btn-outline-primary" href="?Thang=@thangSau&Nam=@namSau">Tháng sau →</a>
</div>

<div id="imagePreview" style="margin-top: 10px;"></div>

<!-- 🟟 Biểu đồ số đơn theo giờ (trong tháng) -->
<div class="card mt-3">
    <div class="card-header bg-light fw-bold">Số đơn theo giờ (trong tháng)</div>
    <div class="card-body">
        <canvas id="ordersByHourChart" height="120"></canvas>
        <div id="loadingHours" class="text-center text-muted mt-2">Đang tải dữ liệu...</div>
    </div>
</div>
<br />

<!-- 🟟 Biểu đồ số đơn theo thứ (trong tháng) -->
<div class="card mt-3">
    <div class="card-header bg-light fw-bold">Số đơn theo thứ (trong tháng)</div>
    <div class="card-body">
        <canvas id="ordersByDayOfWeekChart" height="120"></canvas>
    </div>
</div>
<br />

<!-- 🟟 Biểu đồ doanh thu từng ngày (trong tháng) -->
<div class="card mt-3">
    <div class="card-header bg-light fw-bold">Doanh thu từng ngày (trong tháng)</div>
    <div class="card-body">
        <canvas id="chartDoanhThu" height="100"></canvas>
    </div>
</div>

<div class="container mt-3">
    <table class="table table-sm table-bordered text-nowrap align-middle text-end">
        <tr>
            <td class="bg-light fw-bold text-start">Lợi Nhuận</td>
            <td style="font-variant-numeric: tabular-nums;">
                @string.Format("{0:N0}", Model.TongDoanhThu - Model.TongChiTieu)
            </td>
            <td class="bg-light fw-bold text-start">Tại Chỗ</td>
            <td style="font-variant-numeric: tabular-nums;">
                @string.Format("{0:N0}", Model.DoanhThuTheoNgay.Sum(x => x.TaiCho))
            </td>
        </tr>
        <tr>
            <td class="bg-light fw-bold text-start">Banking</td>
            <td style="font-variant-numeric: tabular-nums;">
                @string.Format("{0:N0}", Model.TongChuyenKhoan)
            </td>
            <td class="bg-light fw-bold text-start">Mua Về</td>
            <td style="font-variant-numeric: tabular-nums;">
                @string.Format("{0:N0}", Model.DoanhThuTheoNgay.Sum(x => x.MuaVe))
            </td>
        </tr>
        <tr>
            <td class="bg-light fw-bold text-start">Tiền Mặt</td>
            <td style="font-variant-numeric: tabular-nums;">
                @string.Format("{0:N0}", Model.TongTienMat)
            </td>
            <td class="bg-light fw-bold text-start">Ship</td>
            <td style="font-variant-numeric: tabular-nums;">
                @string.Format("{0:N0}", Model.DoanhThuTheoNgay.Sum(x => x.DiShip))
            </td>
        </tr>
        <tr>
            <td class="bg-light fw-bold text-start">Ghi Nợ</td>
            <td class="text-end" style="font-variant-numeric: tabular-nums;">
                @string.Format("{0:N0}", Model.TongTienNo)
            </td>
            <td class="bg-light fw-bold text-start">App</td>
            <td style="font-variant-numeric: tabular-nums;">
                @string.Format("{0:N0}", Model.DoanhThuTheoNgay.Sum(x => x.AppShipping))
            </td>
        </tr>
        <tr>
            <td class="bg-light fw-bold text-start">Thưởng</td>
            <td class="text-end" style="font-variant-numeric: tabular-nums;">
                @string.Format("{0:N0}", Model.ThuongNha)
            </td>
            <td class="bg-light fw-bold text-start">Ứng</td>
            <td style="font-variant-numeric: tabular-nums;">
                @string.Format("{0:N0}", -1)
            </td>
        </tr>
    </table>

    <table class="table table-sm table-bordered">
        <thead class="table-light">
            <tr>
                <th>Ngày</th>
                <th>Số đơn</th>
                <th class="text-end">Doanh thu</th>
                <th class="text-end">Chi tiêu</th>
            </tr>
            <tr>
                <td class="fw-bold text-start">Tổng</td>
                <td class="text-end" style="font-variant-numeric: tabular-nums;">
                    @string.Format("{0:N0}", Model.TongSoDon)
                </td>
                <td class="text-end" style="font-variant-numeric: tabular-nums;">
                    @string.Format("{0:N0}", Model.TongDoanhThu)
                </td>
                <td class="text-end" style="font-variant-numeric: tabular-nums;">
                    @string.Format("{0:N0}", Model.TongChiTieu)
                </td>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.DoanhThuTheoNgay.OrderByDescending(x => x.Ngay))
            {
                <tr>
                    <td class="ngay-thang">
                        <a asp-page="/DoanhThuNgay" asp-route-ngay="@item.Ngay.Day"
                           asp-route-thang="@item.Ngay.Month"
                           asp-route-nam="@item.Ngay.Year">
                            @item.Ngay.ToString("dd/MM")
                        </a>
                    </td>
                    <td class="so-tien">@item.SoDon</td>
                    <td class="so-tien">@item.TongTien.ToString("N0")</td>
                    <td class="so-tien">@item.ChiTieu.ToString("N0")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0"></script>

    <script>
        // === BIỂU ĐỒ SỐ ĐƠN THEO GIỜ (TRONG THÁNG) ===
        const HOUR_START = 6;
        const HOUR_END = 22;
        const bucketCount = HOUR_END - HOUR_START + 1;

        async function loadHours() {
            const url = `?handler=ThangByHour&thang=@thang&nam=@nam&startHour=${HOUR_START}&endHour=${HOUR_END}`;
            const res = await fetch(url, { headers: { "X-Requested-With": "XMLHttpRequest" } });
            if (!res.ok) {
                const el = document.getElementById('loadingHours');
                if (el) el.innerText = `⚠️ Lỗi tải dữ liệu (${res.status})`;
                return;
            }
            let json;
            try {
                json = await res.json(); // Result<List<DoanhThuHourBucketDto>>
            } catch {
                const el = document.getElementById('loadingHours');
                if (el) el.innerText = '⚠️ Không đọc được JSON từ server';
                return;
            }

            const data = (json && json.data) ? json.data : [];

            // Chuẩn hoá mảng counts đủ 6..22
            const counts = Array(bucketCount).fill(0);
            data.forEach(x => {
                if (x.hour >= HOUR_START && x.hour <= HOUR_END) {
                    counts[x.hour - HOUR_START] = x.soDon;
                }
            });

            const labels = Array.from({ length: bucketCount }, (_, i) => (HOUR_START + i) + "h");
            const maxVal = counts.length ? Math.max(...counts) : 0;
            const bg = counts.map(c => c === maxVal && maxVal > 0
                ? 'rgba(255, 99, 132, 0.85)'
                : 'rgba(54, 162, 235, 0.6)');
            const border = counts.map(c => c === maxVal && maxVal > 0
                ? 'rgba(255, 99, 132, 1)'
                : 'rgba(54, 162, 235, 1)');

            const ctx = document.getElementById('ordersByHourChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels,
                    datasets: [{
                        label: 'Số đơn',
                        data: counts,
                        backgroundColor: bg,
                        borderColor: border,
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        x: { title: { display: false } },
                        y: { beginAtZero: true, title: { display: false }, ticks: { precision: 0 } }
                    },
                    plugins: {
                        legend: { display: false },
                        tooltip: { callbacks: { label: ctx => `${ctx.parsed.y} đơn` } }
                    }
                }
            });

            const loadingEl = document.getElementById('loadingHours');
            if (loadingEl) loadingEl.remove();
        }
        loadHours();

        // === BIỂU ĐỒ SỐ ĐƠN THEO THỨ (TRONG THÁNG) ===
        const dayOfWeekLabels = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
        const dataDays = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
            Model.DoanhThuTheoNgay.Select(d => new {
                dayOfWeek = (int)d.Ngay.DayOfWeek,
                soDon = d.SoDon
            })
        ));
        const dayTotals = Array(7).fill(0);
        dataDays.forEach(d => { dayTotals[d.dayOfWeek] += d.soDon; });
        const maxVal = Math.max(...dayTotals);
        const bg = dayTotals.map(v => v === maxVal ? 'rgba(255,99,132,0.85)' : 'rgba(54,162,235,0.6)');
        const border = dayTotals.map(v => v === maxVal ? 'rgba(255,99,132,1)' : 'rgba(54,162,235,1)');
        const ctxDay = document.getElementById('ordersByDayOfWeekChart').getContext('2d');
        new Chart(ctxDay, {
            type: 'bar',
            data: {
                labels: dayOfWeekLabels,
                datasets: [{ data: dayTotals, backgroundColor: bg, borderColor: border, borderWidth: 1 }]
            },
            options: {
                scales: {
                    x: { title: { display: false } },
                    y: { beginAtZero: true, title: { display: false }, ticks: { precision: 0 } }
                },
                plugins: {
                    legend: { display: false },
                    tooltip: { callbacks: { label: ctx => `${ctx.parsed.y} đơn` } }
                }
            }
        });

        // === BIỂU ĐỒ DOANH THU THEO NGÀY ===
        const labels = [@Html.Raw(string.Join(",", Model.DoanhThuTheoNgay.Select(d => $"'{d.Ngay:dd/MM}'")))];
        const doanhThuData = [@string.Join(",", Model.DoanhThuTheoNgay.Select(d => d.TongTien))];
        const ctx = document.getElementById('chartDoanhThu').getContext('2d');
        const maxValDoanhThu = doanhThuData.length ? Math.max(...doanhThuData) : 0;
        const bgDoanhThu = doanhThuData.map(v =>
            v === maxValDoanhThu && maxValDoanhThu > 0
                ? 'rgba(255, 99, 132, 0.85)'
                : 'rgba(54, 162, 235, 0.6)'
        );
        const borderDoanhThu = doanhThuData.map(v =>
            v === maxValDoanhThu && maxValDoanhThu > 0
                ? 'rgba(255, 99, 132, 1)'
                : 'rgba(54, 162, 235, 1)'
        );

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels,
                datasets: [{
                    label: 'Doanh Thu',
                    data: doanhThuData,
                    backgroundColor: bgDoanhThu,
                    borderColor: borderDoanhThu,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false },
                    tooltip: { callbacks: { label: ctx => ctx.parsed.y.toLocaleString('vi-VN') + 'đ' } }
                },
                scales: { y: { beginAtZero: true } }
            }
        });
    </script>
}