<Application
    x:Class="TraSuaApp.WpfClient.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:conveter="clr-namespace:TraSuaApp.WpfClient.Converters"
    xmlns:ctrl="clr-namespace:TraSuaApp.WpfClient.Controls"
    xmlns:fa="clr-namespace:FontAwesome.Sharp;assembly=FontAwesome.Sharp"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    Exit="Application_Exit">
    <Application.Resources>
        <Storyboard
            x:Key="FlashStoryboard"
            AutoReverse="True"
            RepeatBehavior="Forever">
            <ColorAnimation
                Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                From="Crimson"
                To="Orange"
                Duration="0:0:0.3" />
        </Storyboard>
        <!--  Converters  -->
        <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
        <conveter:RowStyleMultiConverter x:Key="RowStyleMultiConverter" />
        <conveter:NullOrEmptyOrDefaultToVisibilityConverter x:Key="NullOrEmptyOrDefaultToVisibilityConverter" />
        <conveter:SkipFirstConverter x:Key="SkipFirstConverter" />
        <conveter:GreaterThanZeroConverter x:Key="GreaterThanZeroConverter" />
        <conveter:NotNullToBoolConverter x:Key="NotNullToBoolConverter" />
        <conveter:InverseBoolConverter x:Key="InverseBoolConverter" />
        <conveter:SoDienThoaiConverter x:Key="SoDienThoaiConverter" />
        <conveter:BoolToHiddenConverter x:Key="BoolToHiddenConverter" />
        <conveter:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />
        <conveter:IntToVisibilityConverter x:Key="IntToVisibilityConverter" />

        <!--  Font sizes  -->
        <sys:Double x:Key="FontSizeSmall">12</sys:Double>
        <sys:Double x:Key="FontSizeNormal">14</sys:Double>
        <sys:Double x:Key="FontSizeLarge">18</sys:Double>
        <sys:Double x:Key="FontSizeBig">22</sys:Double>
        <sys:Double x:Key="FontSizeXXX">80</sys:Double>

        <!--  Bootstrap palette  -->
        <SolidColorBrush x:Key="PrimaryBrush" Color="#0d6efd" />
        <SolidColorBrush x:Key="SuccessBrush" Color="#198754" />
        <SolidColorBrush x:Key="WarningBrush" Color="#ffc107" />
        <SolidColorBrush x:Key="DangerBrush" Color="#dc3545" />
        <SolidColorBrush x:Key="SecondaryBrush" Color="#6c757d" />
        <SolidColorBrush x:Key="InfoBrush" Color="#0dcaf0" />
        <SolidColorBrush x:Key="LightBrush" Color="#f8f9fa" />
        <SolidColorBrush x:Key="DarkBrush" Color="#212529" />

        <!--  Bootstrap grays  -->
        <SolidColorBrush x:Key="Gray100Brush" Color="#f8f9fa" />
        <SolidColorBrush x:Key="Gray200Brush" Color="#e9ecef" />
        <SolidColorBrush x:Key="Gray300Brush" Color="#dee2e6" />
        <SolidColorBrush x:Key="Gray400Brush" Color="#ced4da" />
        <SolidColorBrush x:Key="Gray500Brush" Color="#adb5bd" />
        <SolidColorBrush x:Key="Gray600Brush" Color="#6c757d" />
        <!--  Secondary  -->
        <SolidColorBrush x:Key="Gray700Brush" Color="#495057" />
        <SolidColorBrush x:Key="Gray800Brush" Color="#343a40" />
        <SolidColorBrush x:Key="Gray900Brush" Color="#212529" />
        <!--  Dark  -->

        <!--  Foregrounds  -->
        <SolidColorBrush x:Key="PrimaryForeground" Color="White" />
        <SolidColorBrush x:Key="SuccessForeground" Color="White" />
        <SolidColorBrush x:Key="WarningForeground" Color="Black" />
        <SolidColorBrush x:Key="DangerForeground" Color="White" />
        <SolidColorBrush x:Key="SecondaryForeground" Color="White" />
        <SolidColorBrush x:Key="InfoForeground" Color="Black" />
        <SolidColorBrush x:Key="LightForeground" Color="Black" />
        <SolidColorBrush x:Key="DarkForeground" Color="White" />

        <!--  ================= Base styles (đặt TRƯỚC để tránh lỗi StaticResource) ================  -->
        <Style x:Key="BaseInputStyle" TargetType="Control">
            <Setter Property="Height" Value="32" />
            <Setter Property="FontWeight" Value="Medium" />
            <Setter Property="Padding" Value="10,0,10,0" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style>

        <Style
            x:Key="BaseButtonStyle"
            BasedOn="{StaticResource BaseInputStyle}"
            TargetType="Button">
            <Setter Property="MinWidth" Value="80" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="Background" Value="{StaticResource SecondaryBrush}" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Opacity" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border
                            Padding="8,4"
                            Background="{TemplateBinding Background}"
                            CornerRadius="6">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.5" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <!--  =======================================================================================  -->

        <!--  Inputs  -->
        <Style BasedOn="{StaticResource BaseInputStyle}" TargetType="{x:Type ctrl:MoneyTextBox}">
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Background" Value="{StaticResource LightBrush}" />
            <Setter Property="BorderBrush" Value="{StaticResource Gray400Brush}" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>
        <Style BasedOn="{StaticResource BaseInputStyle}" TargetType="{x:Type ctrl:NumericTextBox}">
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Background" Value="{StaticResource LightBrush}" />
            <Setter Property="BorderBrush" Value="{StaticResource Gray400Brush}" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>
        <Style BasedOn="{StaticResource BaseInputStyle}" TargetType="{x:Type ctrl:PhoneNumberTextBox}">
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Background" Value="{StaticResource LightBrush}" />
            <Setter Property="BorderBrush" Value="{StaticResource Gray400Brush}" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>
        <Style BasedOn="{StaticResource BaseInputStyle}" TargetType="TextBox">
            <Setter Property="Background" Value="{StaticResource LightBrush}" />
            <Setter Property="BorderBrush" Value="{StaticResource Gray400Brush}" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>
        <Style BasedOn="{StaticResource BaseInputStyle}" TargetType="ComboBox">
            <Setter Property="Background" Value="{StaticResource LightBrush}" />
            <Setter Property="BorderBrush" Value="{StaticResource Gray400Brush}" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>
        <Style BasedOn="{StaticResource BaseInputStyle}" TargetType="PasswordBox">
            <Setter Property="Background" Value="{StaticResource LightBrush}" />
            <Setter Property="BorderBrush" Value="{StaticResource Gray400Brush}" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>

        <!--  DatePicker  -->
        <Style TargetType="DatePicker">
            <Setter Property="Height" Value="32" />
            <Setter Property="Padding" Value="5" />
        </Style>

        <!--  CheckBox chung  -->
        <Style TargetType="CheckBox">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style>

        <!--  DataGrid CheckBox elements  -->
        <Style x:Key="DataGridCheckBoxElementBaseStyle" TargetType="CheckBox">
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Height" Value="32" />
            <Setter Property="IsHitTestVisible" Value="False" />
            <Setter Property="Focusable" Value="False" />
        </Style>
        <Style
            x:Key="DataGridCheckBoxElementStyle"
            BasedOn="{StaticResource DataGridCheckBoxElementBaseStyle}"
            TargetType="CheckBox" />
        <Style
            x:Key="DataGridCheckBoxElementStyleLeft"
            BasedOn="{StaticResource DataGridCheckBoxElementBaseStyle}"
            TargetType="CheckBox">
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Margin" Value="16,0,0,0" />
        </Style>

        <!--  Buttons (variants)  -->
        <Style
            x:Key="AddButtonStyle"
            BasedOn="{StaticResource BaseButtonStyle}"
            TargetType="Button">
            <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
        </Style>
        <Style
            x:Key="EditButtonStyle"
            BasedOn="{StaticResource BaseButtonStyle}"
            TargetType="Button">
            <Setter Property="Background" Value="{StaticResource SuccessBrush}" />
        </Style>
        <Style
            x:Key="DeleteButtonStyle"
            BasedOn="{StaticResource BaseButtonStyle}"
            TargetType="Button">
            <Setter Property="Background" Value="{StaticResource DangerBrush}" />
        </Style>
        <Style
            x:Key="ReloadButtonStyle"
            BasedOn="{StaticResource BaseButtonStyle}"
            TargetType="Button">
            <Setter Property="Background" Value="{StaticResource WarningBrush}" />
            <Setter Property="Foreground" Value="{StaticResource DarkBrush}" />
        </Style>

        <!--  Small action buttons  -->
        <Style
            x:Key="BaseSmallButtonStyle"
            BasedOn="{StaticResource BaseButtonStyle}"
            TargetType="Button">
            <Setter Property="MinWidth" Value="0" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
        </Style>
        <Style
            x:Key="ThemButtonStyle"
            BasedOn="{StaticResource BaseSmallButtonStyle}"
            TargetType="Button">
            <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
        </Style>
        <Style
            x:Key="SuaButtonStyle"
            BasedOn="{StaticResource BaseSmallButtonStyle}"
            TargetType="Button">
            <Setter Property="Foreground" Value="{StaticResource SuccessBrush}" />
        </Style>
        <Style
            x:Key="TaiLaiButtonStyle"
            BasedOn="{StaticResource BaseSmallButtonStyle}"
            TargetType="Button">
            <Setter Property="Foreground" Value="{StaticResource WarningBrush}" />
        </Style>
        <Style
            x:Key="XoaButtonStyle"
            BasedOn="{StaticResource BaseSmallButtonStyle}"
            TargetType="Button">
            <Setter Property="Foreground" Value="{StaticResource DangerBrush}" />
        </Style>

        <!--  TabItem  -->
        <Style TargetType="TabItem">
            <Setter Property="Padding" Value="12,6" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TabItem">
                        <Border
                            x:Name="Bd"
                            Margin="4,0"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1"
                            CornerRadius="  0">
                            <ContentPresenter
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                ContentSource="Header" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{StaticResource Gray200Brush}" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{StaticResource SuccessBrush}" />
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource SuccessBrush}" />
                                <Setter Property="Foreground" Value="{StaticResource PrimaryForeground}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{StaticResource SecondaryBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  Title bar buttons  -->
        <Style x:Key="TitleBarButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource Gray300Brush}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style
            x:Key="CloseTitleBarButtonStyle"
            BasedOn="{StaticResource TitleBarButtonStyle}"
            TargetType="Button">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource DangerBrush}" />
                    <Setter Property="Foreground" Value="{StaticResource DangerForeground}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--  Search textbox / hint  -->
        <Style x:Key="SearchTextBoxStyle" TargetType="TextBox">
            <Setter Property="Padding" Value="10,0" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Background" Value="{StaticResource LightBrush}" />
            <Setter Property="BorderBrush" Value="{StaticResource Gray400Brush}" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>
        <Style x:Key="SearchHintTextStyle" TargetType="TextBlock">
            <Setter Property="Margin" Value="12,0,0,0" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Foreground" Value="{StaticResource Gray600Brush}" />
            <Setter Property="IsHitTestVisible" Value="False" />
        </Style>

        <!--  Close button (×)  -->
        <Style x:Key="CloseButtonStyle" TargetType="Button">
            <Setter Property="Width" Value="32" />
            <Setter Property="Height" Value="32" />
            <Setter Property="Margin" Value="0,5,5,0" />
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Foreground" Value="{StaticResource Gray500Brush}" />
            <Setter Property="Content" Value="✖" />
        </Style>

        <!--  Title text  -->
        <Style x:Key="TitleTextStyle" TargetType="TextBlock">
            <Setter Property="Margin" Value="10,5" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Foreground" Value="{StaticResource Gray700Brush}" />
        </Style>

        <!--  Popup windows  -->
        <Style x:Key="BasePopupWindowStyle" TargetType="Window">
            <Setter Property="AllowsTransparency" Value="True" />
            <Setter Property="Background" Value="#99000000" />
            <Setter Property="ResizeMode" Value="NoResize" />
            <Setter Property="SizeToContent" Value="Manual" />
            <Setter Property="WindowStyle" Value="None" />
        </Style>
        <Style
            x:Key="PopupWindowWithBorderStyle"
            BasedOn="{StaticResource BasePopupWindowStyle}"
            TargetType="Window">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Window">
                        <Grid Background="#99000000">
                            <Border
                                Width="800"
                                Height="600"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Background="{StaticResource Gray100Brush}"
                                BorderBrush="{StaticResource Gray300Brush}"
                                BorderThickness="1"
                                CornerRadius="12">
                                <ContentPresenter />
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  Hide if empty  -->
        <Style x:Key="HideIfEmptyTextBlockStyle" TargetType="TextBlock">
            <Setter Property="Visibility" Value="Visible" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource Self}}" Value="">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--  Edit window  -->
        <Style x:Key="EditWindowStyle" TargetType="Window">
            <Setter Property="AllowsTransparency" Value="True" />
            <Setter Property="FontSize" Value="{StaticResource FontSizeNormal}" />
            <Setter Property="Background" Value="#99000000" />
            <Setter Property="ResizeMode" Value="NoResize" />
            <Setter Property="SizeToContent" Value="Manual" />
            <Setter Property="WindowStyle" Value="None" />
            <Setter Property="MinWidth" Value="800" />
            <Setter Property="MinHeight" Value="600" />
        </Style>
        <Style x:Key="EditFormBorderStyle" TargetType="Border">
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Background" Value="White" />
            <Setter Property="BorderBrush" Value="{StaticResource Gray300Brush}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="CornerRadius" Value="12" />
        </Style>
        <Style x:Key="EditHeaderPanelStyle" TargetType="DockPanel">
            <Setter Property="LastChildFill" Value="True" />
            <Setter Property="Margin" Value="0,0,0,10" />
        </Style>
        <Style x:Key="EditTitleTextStyle" TargetType="TextBlock">
            <Setter Property="Margin" Value="10,5" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Foreground" Value="{StaticResource Gray700Brush}" />
        </Style>

        <!--  Save button (giữ riêng vì form edit đang dùng)  -->
        <Style x:Key="SaveButtonStyle" TargetType="Button">
            <Setter Property="MinWidth" Value="100" />
            <Setter Property="Height" Value="36" />
            <Setter Property="Background" Value="{StaticResource SuccessBrush}" />
            <Setter Property="Foreground" Value="{StaticResource SuccessForeground}" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="BorderBrush" Value="{StaticResource SuccessBrush}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#239e63" />
                    <!--  hover đậm hơn  -->
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--  Error text  -->
        <Style x:Key="ErrorTextBlock" TargetType="TextBlock">
            <Setter Property="Foreground" Value="{StaticResource DangerBrush}" />
            <Setter Property="TextWrapping" Value="Wrap" />
            <Setter Property="Margin" Value="0,0,0,5" />
        </Style>

        <!--  Clear X button  -->
        <Style x:Key="ClearXButtonStyle" TargetType="Button">
            <Setter Property="Width" Value="20" />
            <Setter Property="Height" Value="20" />
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Visibility" Value="Collapsed" />
            <Setter Property="Foreground" Value="{StaticResource Gray600Brush}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <TextBlock
                            Padding="8"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Foreground="{TemplateBinding Foreground}"
                            Text="❌" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="{StaticResource Gray700Brush}" />
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Foreground" Value="{StaticResource DarkBrush}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--  RadioButton  -->
        <Style TargetType="{x:Type RadioButton}">
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border
                            Padding="4"
                            Background="Transparent"
                            SnapsToDevicePixels="True">
                            <StackPanel VerticalAlignment="Center" Orientation="Horizontal">
                                <Grid>
                                    <fa:IconBlock
                                        x:Name="CheckedIcon"
                                        Foreground="{TemplateBinding Foreground}"
                                        Icon="Check"
                                        Visibility="Collapsed" />
                                    <fa:IconBlock
                                        Foreground="{TemplateBinding Foreground}"
                                        Icon="Check"
                                        Visibility="Hidden" />
                                </Grid>
                                <ContentPresenter
                                    Margin="5,0,0,0"
                                    VerticalAlignment="Center"
                                    RecognizesAccessKey="True" />
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="CheckedIcon" Property="Visibility" Value="Visible" />
                                <Setter Property="FontWeight" Value="Medium" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  GroupBox  -->
        <Style TargetType="{x:Type GroupBox}">
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>

        <!--  DataGrid cell text styles  -->
        <Style x:Key="CenterTextCellStyle" TargetType="TextBlock">
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Padding" Value="16,8,16,8" />
        </Style>
        <Style x:Key="LeftTextCellStyle" TargetType="TextBlock">
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Padding" Value="16,8,16,8" />
        </Style>
        <Style x:Key="RightTextCellStyle" TargetType="TextBlock">
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Padding" Value="16,8,16,8" />
        </Style>

        <!--  DataGrid  -->
        <Style x:Key="MiddleCellStyle" TargetType="DataGridCell">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="16,16,16,16" />
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{StaticResource InfoBrush}" />
                    <Setter Property="Foreground" Value="{StaticResource InfoForeground}" />
                    <Setter Property="BorderBrush" Value="{StaticResource InfoBrush}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="DataGridColumnHeader">
            <Setter Property="Padding" Value="16,8,16,8" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="FontWeight" Value="SemiBold" />
        </Style>
        <Style TargetType="DataGrid">
            <Setter Property="AlternatingRowBackground" Value="{StaticResource Gray100Brush}" />
            <Setter Property="RowBackground" Value="{StaticResource Gray200Brush}" />
            <Setter Property="AutoGenerateColumns" Value="False" />
            <Setter Property="BorderBrush" Value="{StaticResource Gray300Brush}" />
            <Setter Property="Background" Value="{StaticResource Gray200Brush}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="CanUserSortColumns" Value="False" />
            <Setter Property="CanUserAddRows" Value="False" />
            <Setter Property="ColumnHeaderHeight" Value="36" />
            <Setter Property="GridLinesVisibility" Value="Horizontal" />
            <Setter Property="HeadersVisibility" Value="Column" />
            <Setter Property="HorizontalGridLinesBrush" Value="Transparent" />
            <Setter Property="IsReadOnly" Value="True" />
            <Setter Property="RowHeight" Value="32" />
            <Setter Property="SelectionMode" Value="Single" />
            <Setter Property="SelectionUnit" Value="FullRow" />
            <Setter Property="CellStyle" Value="{StaticResource MiddleCellStyle}" />
            <!--  Virtualization  -->
            <Setter Property="EnableRowVirtualization" Value="True" />
            <Setter Property="EnableColumnVirtualization" Value="True" />
            <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
            <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
            <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="True" />
        </Style>

        <!--  ListBox  -->
        <Style TargetType="{x:Type ListBox}">
            <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
            <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
            <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="True" />
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel />
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--  Nút có spinner quay bằng Storyboard khi IsEnabled = False  -->
        <Style
            x:Key="ButtonWithSpinnerStyle"
            BasedOn="{StaticResource ReloadButtonStyle}"
            TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border
                            Padding="8,4"
                            Background="{TemplateBinding Background}"
                            CornerRadius="6">
                            <Grid>
                                <!--  Trạng thái bình thường  -->
                                <StackPanel
                                    x:Name="NormalPanel"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Orientation="Horizontal">
                                    <fa:IconBlock
                                        Margin="0,0,6,0"
                                        Foreground="{TemplateBinding Foreground}"
                                        Icon="RotateRight" />
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                </StackPanel>

                                <!--  Trạng thái đang tải  -->
                                <StackPanel
                                    x:Name="LoadingPanel"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Orientation="Horizontal"
                                    Visibility="Collapsed">
                                    <fa:IconBlock
                                        x:Name="SpinIcon"
                                        Margin="0,0,6,0"
                                        Foreground="{TemplateBinding Foreground}"
                                        Icon="Spinner"
                                        RenderTransformOrigin="0.5,0.5">
                                        <fa:IconBlock.RenderTransform>
                                            <RotateTransform Angle="0" />
                                        </fa:IconBlock.RenderTransform>
                                    </fa:IconBlock>
                                    <TextBlock
                                        FontWeight="SemiBold"
                                        Foreground="{TemplateBinding Foreground}"
                                        Text="Đang tải…" />
                                </StackPanel>
                            </Grid>
                        </Border>

                        <!--  Kích hoạt spinner khi Disable  -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="NormalPanel" Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="LoadingPanel" Property="Visibility" Value="Visible" />
                                <Trigger.EnterActions>
                                    <BeginStoryboard x:Name="SpinBS">
                                        <Storyboard RepeatBehavior="Forever">
                                            <DoubleAnimation
                                                Storyboard.TargetName="SpinIcon"
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                From="0"
                                                To="360"
                                                Duration="0:0:1" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <StopStoryboard BeginStoryboardName="SpinBS" />
                                </Trigger.ExitActions>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>